generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  tasks Task[]
  projects        ProjectMember[]
  assignedTasks   ProjectTask[]    @relation("TaskAssignee")
}

enum TaskStatus {
  ONGOING
  PAUSED
  COMPLETED
}

model Task {
  id          String    @id @default(uuid())
  name        String
  description String?
  deadline    DateTime?
  status      TaskStatus @default(ONGOING)  // Default status is ONGOING
  createdAt   DateTime @default(now())
  userId      String?   // Foreign key to User
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String           @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  members     ProjectMember[]  // project members
  tasks       ProjectTask[]    // tasks in project
}

model ProjectMember {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  isManager Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // one user per project
}


model ProjectTask {
  id          String     @id @default(uuid())
  title       String
  description String?
  deadline    DateTime?
  completed   Boolean    @default(false)

  projectId   String
  assigneeId  String?

  project     Project    @relation(fields: [projectId], references: [id])
  assignee    User?      @relation(fields: [assigneeId], references: [id], name: "TaskAssignee")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

